{"google":"UA-35239288-1","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"AMD Kit","tagline":"A simple, easy to use and understand AMD loader for building more modular sites without using a clunky library.","body":"## Asynchronous Module Definitions - Simplified\r\nAMD is a _very_ useful way to organize site Javascript and to speed up page load times.  This is a basic JS module loader designed to be so simple that it's easy to extend.  Out of the box it doesn't require any specific directory organization or defining include paths beforehand - though organizing your code is good practice!\r\n\r\n### Easy to use!\r\nDefining a cross-browser console module:\r\n```javascript\r\n//define the module name (filename requires no setup)\r\ndefine('/js/utils/console.js', function() {\r\n\t//return the module object to be passed around\r\n\tif (typeof console === 'object' && typeof console.log === 'function')\r\n\t\treturn console.log;\r\n\telse\r\n\t\treturn alert;\r\n});\r\n```\r\nanyfile.js / anypage.html: (use the module)\r\n```javascript\r\n//define dependency modules, pass in as arguments\r\nrequire('/js/utils/console.js', function(log) {\r\n\t//use the arguments to refer to the required module!\r\n\tlog('AMD Kit worked!');\r\n});\r\n```\r\n\r\n### Parallel Script Loading\r\nBy loading Javascript files asynchronously you are allowing the page to continue loading while the module handler grabs Javascript dependencies in parallel.  Now load your pages faster!\r\n### Code Organization\r\nMake it simple to break functionality out into different modules.  Without a module loader you might manage your code by adding or changing the HTML script tags (which is a pain itself if working with a compiled backend) or making a huge master file.  Now you can break your module into a closure and put it into it's own file.\r\n### Enforce Best Practices\r\nIf working on a team with less experienced Javascript developers, you can teach this simple version of the module pattern and which _can_ restrict modules to closures and keep the global namespace clean.  It also introduces development in self-contained modules rather than a large string of procedural code.\r\n### Load When Needed\r\nRather than loading all of a site's Javascript on every page when needed, it is possible to load only the required Javascript for a page by defining dependencies.  You can also wait to load UI extensions one step ahead of user interaction for **just in time** script loading - especially useful for single page or large applications."}